// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {

  provider  = "postgresql"
  url       = env("DATABASE_URL")
  //directUrl = env("DIRECT_URL")
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  password      String
  signinType    Boolean
  bio           String?
  email         String?   @unique
  emailVerified DateTime?

  createdGroups Group[]      @relation("CreatedBy")
  joinedGroups  Membership[]
  votes         Vote[]
  Posts         Post[]
  Comments      Comment[]

  imageUrl            String?
  imagePublicId       String?
  isOnboard           Boolean
  passwordResetTokens PasswordResetToken[]
  accounts            Account[]
  sessions            Session[]
  Message             Message[]
  FriendRequest       FriendRequest[]
  FriendList          FriendList[]
}

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  createdAt DateTime  @default(now())
  resetAt   DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Group {
  id          String   @id @default(cuid())
  name        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
  description String?
  picture     String?
  banner      String?
  type        String?

  creatorId String?
  Creator   User?        @relation("CreatedBy", fields: [creatorId], references: [id])
  members   Membership[]
}

model Membership {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  @@id([userId, groupId])
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  group     Group     @relation(fields: [groupId], references: [id])
  groupId   String
  votes     Vote[]
  comments  Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  commentId String?
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  type   VoteType

  @@id([userId, postId])
}

model Message {
  id          String   @id @default(uuid())
  message     String
  User        User?    @relation(fields: [email], references: [email])
  email       String
  sender_id   String?
  receiver_id String?
  createdAt   DateTime @default(now())
}

model FriendRequest {
  id          String @id @default(uuid())
  sender_id   String
  sender_info User   @relation(fields: [userId], references: [id])
  receiver_id String
  userId      String
}

model FriendList {
  id          String @id @default(uuid())
  friend_list User[]
}
